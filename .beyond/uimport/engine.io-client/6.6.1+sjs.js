{"code":"System.register([\"engine.io-parser@5.2.3\",\"@socket.io/component-emitter@3.1.2\"], (_exports, _context) => {\n\nconst bimport = specifier => {\n\tconst dependencies = new Map([[\"engine.io-parser\",\"5.2.3\"],[\"@socket.io/component-emitter\",\"3.1.2\"],[\"engine.io-client\",\"6.6.1\"]]);\n\treturn globalThis.bimport(globalThis.bimport.resolve(specifier, dependencies));\n};\n\n\nvar dependencies = new Map();\nvar require = dependency => dependencies.get(dependency);\nreturn {\nsetters: [dep => dependencies.set('engine.io-parser@5.2.3', dep), dep => dependencies.set('@socket.io/component-emitter@3.1.2', dep)],\nexecute: function() {\n// Prevent esbuild from considering the context to be amd\nconst define = void 0;\nconst module = {};\n\nconst code = (module, require) => {\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n      get: () => from[key],\n      enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n    });\n  }\n  return to;\n};\nvar __toCommonJS = mod => __copyProps(__defProp({}, \"__esModule\", {\n  value: true\n}), mod);\n\n// .beyond/uimport/engine.io-client.6.6.1.js\nvar engine_io_client_6_6_1_exports = {};\n__export(engine_io_client_6_6_1_exports, {\n  Fetch: () => Fetch,\n  NodeWebSocket: () => WS,\n  NodeXHR: () => XHR,\n  Socket: () => Socket,\n  SocketWithUpgrade: () => SocketWithUpgrade,\n  SocketWithoutUpgrade: () => SocketWithoutUpgrade,\n  Transport: () => Transport,\n  TransportError: () => TransportError,\n  WebSocket: () => WS,\n  WebTransport: () => WT,\n  XHR: () => XHR,\n  installTimerFunctions: () => installTimerFunctions,\n  nextTick: () => nextTick,\n  parse: () => parse,\n  protocol: () => protocol2,\n  transports: () => transports\n});\nmodule.exports = __toCommonJS(engine_io_client_6_6_1_exports);\n\n// node_modules/engine.io-client/build/esm/globals.js\nvar nextTick = (() => {\n  const isPromiseAvailable = typeof Promise === \"function\" && typeof Promise.resolve === \"function\";\n  if (isPromiseAvailable) {\n    return cb => Promise.resolve().then(cb);\n  } else {\n    return (cb, setTimeoutFn) => setTimeoutFn(cb, 0);\n  }\n})();\nvar globalThisShim = (() => {\n  if (typeof self !== \"undefined\") {\n    return self;\n  } else if (typeof window !== \"undefined\") {\n    return window;\n  } else {\n    return Function(\"return this\")();\n  }\n})();\nvar defaultBinaryType = \"arraybuffer\";\nfunction createCookieJar() {}\n\n// node_modules/engine.io-client/build/esm/util.js\nfunction pick(obj, ...attr) {\n  return attr.reduce((acc, k) => {\n    if (obj.hasOwnProperty(k)) {\n      acc[k] = obj[k];\n    }\n    return acc;\n  }, {});\n}\nvar NATIVE_SET_TIMEOUT = globalThisShim.setTimeout;\nvar NATIVE_CLEAR_TIMEOUT = globalThisShim.clearTimeout;\nfunction installTimerFunctions(obj, opts) {\n  if (opts.useNativeTimers) {\n    obj.setTimeoutFn = NATIVE_SET_TIMEOUT.bind(globalThisShim);\n    obj.clearTimeoutFn = NATIVE_CLEAR_TIMEOUT.bind(globalThisShim);\n  } else {\n    obj.setTimeoutFn = globalThisShim.setTimeout.bind(globalThisShim);\n    obj.clearTimeoutFn = globalThisShim.clearTimeout.bind(globalThisShim);\n  }\n}\nvar BASE64_OVERHEAD = 1.33;\nfunction byteLength(obj) {\n  if (typeof obj === \"string\") {\n    return utf8Length(obj);\n  }\n  return Math.ceil((obj.byteLength || obj.size) * BASE64_OVERHEAD);\n}\nfunction utf8Length(str) {\n  let c = 0,\n    length = 0;\n  for (let i = 0, l = str.length; i < l; i++) {\n    c = str.charCodeAt(i);\n    if (c < 128) {\n      length += 1;\n    } else if (c < 2048) {\n      length += 2;\n    } else if (c < 55296 || c >= 57344) {\n      length += 3;\n    } else {\n      i++;\n      length += 4;\n    }\n  }\n  return length;\n}\nfunction randomString() {\n  return Date.now().toString(36).substring(3) + Math.random().toString(36).substring(2, 5);\n}\n\n// node_modules/engine.io-client/build/esm/contrib/parseqs.js\nfunction encode(obj) {\n  let str = \"\";\n  for (let i in obj) {\n    if (obj.hasOwnProperty(i)) {\n      if (str.length) str += \"&\";\n      str += encodeURIComponent(i) + \"=\" + encodeURIComponent(obj[i]);\n    }\n  }\n  return str;\n}\nfunction decode(qs) {\n  let qry = {};\n  let pairs = qs.split(\"&\");\n  for (let i = 0, l = pairs.length; i < l; i++) {\n    let pair = pairs[i].split(\"=\");\n    qry[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);\n  }\n  return qry;\n}\n\n// node_modules/engine.io-client/build/esm/transport.js\nvar import_engine = require(\"engine.io-parser@5.2.3\");\nvar import_component_emitter = require(\"@socket.io/component-emitter@3.1.2\");\nvar TransportError = class extends Error {\n  constructor(reason, description, context) {\n    super(reason);\n    this.description = description;\n    this.context = context;\n    this.type = \"TransportError\";\n  }\n};\nvar Transport = class extends import_component_emitter.Emitter {\n  constructor(opts) {\n    super();\n    this.writable = false;\n    installTimerFunctions(this, opts);\n    this.opts = opts;\n    this.query = opts.query;\n    this.socket = opts.socket;\n    this.supportsBinary = !opts.forceBase64;\n  }\n  onError(reason, description, context) {\n    super.emitReserved(\"error\", new TransportError(reason, description, context));\n    return this;\n  }\n  open() {\n    this.readyState = \"opening\";\n    this.doOpen();\n    return this;\n  }\n  close() {\n    if (this.readyState === \"opening\" || this.readyState === \"open\") {\n      this.doClose();\n      this.onClose();\n    }\n    return this;\n  }\n  send(packets) {\n    if (this.readyState === \"open\") {\n      this.write(packets);\n    } else {}\n  }\n  onOpen() {\n    this.readyState = \"open\";\n    this.writable = true;\n    super.emitReserved(\"open\");\n  }\n  onData(data) {\n    const packet = (0, import_engine.decodePacket)(data, this.socket.binaryType);\n    this.onPacket(packet);\n  }\n  onPacket(packet) {\n    super.emitReserved(\"packet\", packet);\n  }\n  onClose(details) {\n    this.readyState = \"closed\";\n    super.emitReserved(\"close\", details);\n  }\n  pause(onPause) {}\n  createUri(schema, query = {}) {\n    return schema + \"://\" + this._hostname() + this._port() + this.opts.path + this._query(query);\n  }\n  _hostname() {\n    const hostname = this.opts.hostname;\n    return hostname.indexOf(\":\") === -1 ? hostname : \"[\" + hostname + \"]\";\n  }\n  _port() {\n    if (this.opts.port && (this.opts.secure && Number(this.opts.port !== 443) || !this.opts.secure && Number(this.opts.port) !== 80)) {\n      return \":\" + this.opts.port;\n    } else {\n      return \"\";\n    }\n  }\n  _query(query) {\n    const encodedQuery = encode(query);\n    return encodedQuery.length ? \"?\" + encodedQuery : \"\";\n  }\n};\n\n// node_modules/engine.io-client/build/esm/transports/polling.js\nvar import_engine2 = require(\"engine.io-parser@5.2.3\");\nvar Polling = class extends Transport {\n  constructor() {\n    super(...arguments);\n    this._polling = false;\n  }\n  get name() {\n    return \"polling\";\n  }\n  doOpen() {\n    this._poll();\n  }\n  pause(onPause) {\n    this.readyState = \"pausing\";\n    const pause = () => {\n      this.readyState = \"paused\";\n      onPause();\n    };\n    if (this._polling || !this.writable) {\n      let total = 0;\n      if (this._polling) {\n        total++;\n        this.once(\"pollComplete\", function () {\n          --total || pause();\n        });\n      }\n      if (!this.writable) {\n        total++;\n        this.once(\"drain\", function () {\n          --total || pause();\n        });\n      }\n    } else {\n      pause();\n    }\n  }\n  _poll() {\n    this._polling = true;\n    this.doPoll();\n    this.emitReserved(\"poll\");\n  }\n  onData(data) {\n    const callback = packet => {\n      if (\"opening\" === this.readyState && packet.type === \"open\") {\n        this.onOpen();\n      }\n      if (\"close\" === packet.type) {\n        this.onClose({\n          description: \"transport closed by the server\"\n        });\n        return false;\n      }\n      this.onPacket(packet);\n    };\n    (0, import_engine2.decodePayload)(data, this.socket.binaryType).forEach(callback);\n    if (\"closed\" !== this.readyState) {\n      this._polling = false;\n      this.emitReserved(\"pollComplete\");\n      if (\"open\" === this.readyState) {\n        this._poll();\n      } else {}\n    }\n  }\n  doClose() {\n    const close = () => {\n      this.write([{\n        type: \"close\"\n      }]);\n    };\n    if (\"open\" === this.readyState) {\n      close();\n    } else {\n      this.once(\"open\", close);\n    }\n  }\n  write(packets) {\n    this.writable = false;\n    (0, import_engine2.encodePayload)(packets, data => {\n      this.doWrite(data, () => {\n        this.writable = true;\n        this.emitReserved(\"drain\");\n      });\n    });\n  }\n  uri() {\n    const schema = this.opts.secure ? \"https\" : \"http\";\n    const query = this.query || {};\n    if (false !== this.opts.timestampRequests) {\n      query[this.opts.timestampParam] = randomString();\n    }\n    if (!this.supportsBinary && !query.sid) {\n      query.b64 = 1;\n    }\n    return this.createUri(schema, query);\n  }\n};\n\n// node_modules/engine.io-client/build/esm/contrib/has-cors.js\nvar value = false;\ntry {\n  value = typeof XMLHttpRequest !== \"undefined\" && \"withCredentials\" in new XMLHttpRequest();\n} catch (err) {}\nvar hasCORS = value;\n\n// node_modules/engine.io-client/build/esm/transports/polling-xhr.js\nvar import_component_emitter2 = require(\"@socket.io/component-emitter@3.1.2\");\nfunction empty() {}\nvar BaseXHR = class extends Polling {\n  constructor(opts) {\n    super(opts);\n    if (typeof location !== \"undefined\") {\n      const isSSL = \"https:\" === location.protocol;\n      let port = location.port;\n      if (!port) {\n        port = isSSL ? \"443\" : \"80\";\n      }\n      this.xd = typeof location !== \"undefined\" && opts.hostname !== location.hostname || port !== opts.port;\n    }\n  }\n  doWrite(data, fn) {\n    const req = this.request({\n      method: \"POST\",\n      data\n    });\n    req.on(\"success\", fn);\n    req.on(\"error\", (xhrStatus, context) => {\n      this.onError(\"xhr post error\", xhrStatus, context);\n    });\n  }\n  doPoll() {\n    const req = this.request();\n    req.on(\"data\", this.onData.bind(this));\n    req.on(\"error\", (xhrStatus, context) => {\n      this.onError(\"xhr poll error\", xhrStatus, context);\n    });\n    this.pollXhr = req;\n  }\n};\nvar Request = class extends import_component_emitter2.Emitter {\n  constructor(createRequest, uri, opts) {\n    super();\n    this.createRequest = createRequest;\n    installTimerFunctions(this, opts);\n    this._opts = opts;\n    this._method = opts.method || \"GET\";\n    this._uri = uri;\n    this._data = void 0 !== opts.data ? opts.data : null;\n    this._create();\n  }\n  _create() {\n    var _a;\n    const opts = pick(this._opts, \"agent\", \"pfx\", \"key\", \"passphrase\", \"cert\", \"ca\", \"ciphers\", \"rejectUnauthorized\", \"autoUnref\");\n    opts.xdomain = !!this._opts.xd;\n    const xhr = this._xhr = this.createRequest(opts);\n    try {\n      xhr.open(this._method, this._uri, true);\n      try {\n        if (this._opts.extraHeaders) {\n          xhr.setDisableHeaderCheck && xhr.setDisableHeaderCheck(true);\n          for (let i in this._opts.extraHeaders) {\n            if (this._opts.extraHeaders.hasOwnProperty(i)) {\n              xhr.setRequestHeader(i, this._opts.extraHeaders[i]);\n            }\n          }\n        }\n      } catch (e) {}\n      if (\"POST\" === this._method) {\n        try {\n          xhr.setRequestHeader(\"Content-type\", \"text/plain;charset=UTF-8\");\n        } catch (e) {}\n      }\n      try {\n        xhr.setRequestHeader(\"Accept\", \"*/*\");\n      } catch (e) {}\n      (_a = this._opts.cookieJar) === null || _a === void 0 ? void 0 : _a.addCookies(xhr);\n      if (\"withCredentials\" in xhr) {\n        xhr.withCredentials = this._opts.withCredentials;\n      }\n      if (this._opts.requestTimeout) {\n        xhr.timeout = this._opts.requestTimeout;\n      }\n      xhr.onreadystatechange = () => {\n        var _a2;\n        if (xhr.readyState === 3) {\n          (_a2 = this._opts.cookieJar) === null || _a2 === void 0 ? void 0 : _a2.parseCookies(xhr.getResponseHeader(\"set-cookie\"));\n        }\n        if (4 !== xhr.readyState) return;\n        if (200 === xhr.status || 1223 === xhr.status) {\n          this._onLoad();\n        } else {\n          this.setTimeoutFn(() => {\n            this._onError(typeof xhr.status === \"number\" ? xhr.status : 0);\n          }, 0);\n        }\n      };\n      xhr.send(this._data);\n    } catch (e) {\n      this.setTimeoutFn(() => {\n        this._onError(e);\n      }, 0);\n      return;\n    }\n    if (typeof document !== \"undefined\") {\n      this._index = Request.requestsCount++;\n      Request.requests[this._index] = this;\n    }\n  }\n  _onError(err) {\n    this.emitReserved(\"error\", err, this._xhr);\n    this._cleanup(true);\n  }\n  _cleanup(fromError) {\n    if (\"undefined\" === typeof this._xhr || null === this._xhr) {\n      return;\n    }\n    this._xhr.onreadystatechange = empty;\n    if (fromError) {\n      try {\n        this._xhr.abort();\n      } catch (e) {}\n    }\n    if (typeof document !== \"undefined\") {\n      delete Request.requests[this._index];\n    }\n    this._xhr = null;\n  }\n  _onLoad() {\n    const data = this._xhr.responseText;\n    if (data !== null) {\n      this.emitReserved(\"data\", data);\n      this.emitReserved(\"success\");\n      this._cleanup();\n    }\n  }\n  abort() {\n    this._cleanup();\n  }\n};\nRequest.requestsCount = 0;\nRequest.requests = {};\nif (typeof document !== \"undefined\") {\n  if (typeof attachEvent === \"function\") {\n    attachEvent(\"onunload\", unloadHandler);\n  } else if (typeof addEventListener === \"function\") {\n    const terminationEvent = \"onpagehide\" in globalThisShim ? \"pagehide\" : \"unload\";\n    addEventListener(terminationEvent, unloadHandler, false);\n  }\n}\nfunction unloadHandler() {\n  for (let i in Request.requests) {\n    if (Request.requests.hasOwnProperty(i)) {\n      Request.requests[i].abort();\n    }\n  }\n}\nvar hasXHR2 = function () {\n  const xhr = newRequest({\n    xdomain: false\n  });\n  return xhr && xhr.responseType !== null;\n}();\nvar XHR = class extends BaseXHR {\n  constructor(opts) {\n    super(opts);\n    const forceBase64 = opts && opts.forceBase64;\n    this.supportsBinary = hasXHR2 && !forceBase64;\n  }\n  request(opts = {}) {\n    Object.assign(opts, {\n      xd: this.xd\n    }, this.opts);\n    return new Request(newRequest, this.uri(), opts);\n  }\n};\nfunction newRequest(opts) {\n  const xdomain = opts.xdomain;\n  try {\n    if (\"undefined\" !== typeof XMLHttpRequest && (!xdomain || hasCORS)) {\n      return new XMLHttpRequest();\n    }\n  } catch (e) {}\n  if (!xdomain) {\n    try {\n      return new globalThisShim[[\"Active\"].concat(\"Object\").join(\"X\")](\"Microsoft.XMLHTTP\");\n    } catch (e) {}\n  }\n}\n\n// node_modules/engine.io-client/build/esm/transports/websocket.js\nvar import_engine3 = require(\"engine.io-parser@5.2.3\");\nvar isReactNative = typeof navigator !== \"undefined\" && typeof navigator.product === \"string\" && navigator.product.toLowerCase() === \"reactnative\";\nvar BaseWS = class extends Transport {\n  get name() {\n    return \"websocket\";\n  }\n  doOpen() {\n    const uri = this.uri();\n    const protocols = this.opts.protocols;\n    const opts = isReactNative ? {} : pick(this.opts, \"agent\", \"perMessageDeflate\", \"pfx\", \"key\", \"passphrase\", \"cert\", \"ca\", \"ciphers\", \"rejectUnauthorized\", \"localAddress\", \"protocolVersion\", \"origin\", \"maxPayload\", \"family\", \"checkServerIdentity\");\n    if (this.opts.extraHeaders) {\n      opts.headers = this.opts.extraHeaders;\n    }\n    try {\n      this.ws = this.createSocket(uri, protocols, opts);\n    } catch (err) {\n      return this.emitReserved(\"error\", err);\n    }\n    this.ws.binaryType = this.socket.binaryType;\n    this.addEventListeners();\n  }\n  addEventListeners() {\n    this.ws.onopen = () => {\n      if (this.opts.autoUnref) {\n        this.ws._socket.unref();\n      }\n      this.onOpen();\n    };\n    this.ws.onclose = closeEvent => this.onClose({\n      description: \"websocket connection closed\",\n      context: closeEvent\n    });\n    this.ws.onmessage = ev => this.onData(ev.data);\n    this.ws.onerror = e => this.onError(\"websocket error\", e);\n  }\n  write(packets) {\n    this.writable = false;\n    for (let i = 0; i < packets.length; i++) {\n      const packet = packets[i];\n      const lastPacket = i === packets.length - 1;\n      (0, import_engine3.encodePacket)(packet, this.supportsBinary, data => {\n        try {\n          this.doWrite(packet, data);\n        } catch (e) {}\n        if (lastPacket) {\n          nextTick(() => {\n            this.writable = true;\n            this.emitReserved(\"drain\");\n          }, this.setTimeoutFn);\n        }\n      });\n    }\n  }\n  doClose() {\n    if (typeof this.ws !== \"undefined\") {\n      this.ws.close();\n      this.ws = null;\n    }\n  }\n  uri() {\n    const schema = this.opts.secure ? \"wss\" : \"ws\";\n    const query = this.query || {};\n    if (this.opts.timestampRequests) {\n      query[this.opts.timestampParam] = randomString();\n    }\n    if (!this.supportsBinary) {\n      query.b64 = 1;\n    }\n    return this.createUri(schema, query);\n  }\n};\nvar WebSocketCtor = globalThisShim.WebSocket || globalThisShim.MozWebSocket;\nvar WS = class extends BaseWS {\n  createSocket(uri, protocols, opts) {\n    return !isReactNative ? protocols ? new WebSocketCtor(uri, protocols) : new WebSocketCtor(uri) : new WebSocketCtor(uri, protocols, opts);\n  }\n  doWrite(_packet, data) {\n    this.ws.send(data);\n  }\n};\n\n// node_modules/engine.io-client/build/esm/transports/webtransport.js\nvar import_engine4 = require(\"engine.io-parser@5.2.3\");\nvar WT = class extends Transport {\n  get name() {\n    return \"webtransport\";\n  }\n  doOpen() {\n    try {\n      this._transport = new WebTransport(this.createUri(\"https\"), this.opts.transportOptions[this.name]);\n    } catch (err) {\n      return this.emitReserved(\"error\", err);\n    }\n    this._transport.closed.then(() => {\n      this.onClose();\n    }).catch(err => {\n      this.onError(\"webtransport error\", err);\n    });\n    this._transport.ready.then(() => {\n      this._transport.createBidirectionalStream().then(stream => {\n        const decoderStream = (0, import_engine4.createPacketDecoderStream)(Number.MAX_SAFE_INTEGER, this.socket.binaryType);\n        const reader = stream.readable.pipeThrough(decoderStream).getReader();\n        const encoderStream = (0, import_engine4.createPacketEncoderStream)();\n        encoderStream.readable.pipeTo(stream.writable);\n        this._writer = encoderStream.writable.getWriter();\n        const read = () => {\n          reader.read().then(({\n            done,\n            value: value2\n          }) => {\n            if (done) {\n              return;\n            }\n            this.onPacket(value2);\n            read();\n          }).catch(err => {});\n        };\n        read();\n        const packet = {\n          type: \"open\"\n        };\n        if (this.query.sid) {\n          packet.data = `{\"sid\":\"${this.query.sid}\"}`;\n        }\n        this._writer.write(packet).then(() => this.onOpen());\n      });\n    });\n  }\n  write(packets) {\n    this.writable = false;\n    for (let i = 0; i < packets.length; i++) {\n      const packet = packets[i];\n      const lastPacket = i === packets.length - 1;\n      this._writer.write(packet).then(() => {\n        if (lastPacket) {\n          nextTick(() => {\n            this.writable = true;\n            this.emitReserved(\"drain\");\n          }, this.setTimeoutFn);\n        }\n      });\n    }\n  }\n  doClose() {\n    var _a;\n    (_a = this._transport) === null || _a === void 0 ? void 0 : _a.close();\n  }\n};\n\n// node_modules/engine.io-client/build/esm/transports/index.js\nvar transports = {\n  websocket: WS,\n  webtransport: WT,\n  polling: XHR\n};\n\n// node_modules/engine.io-client/build/esm/contrib/parseuri.js\nvar re = /^(?:(?![^:@\\/?#]+:[^:@\\/]*@)(http|https|ws|wss):\\/\\/)?((?:(([^:@\\/?#]*)(?::([^:@\\/?#]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\\/?#]*)(?::(\\d*))?)(((\\/(?:[^?#](?![^?#\\/]*\\.[^?#\\/.]+(?:[?#]|$)))*\\/?)?([^?#\\/]*))(?:\\?([^#]*))?(?:#(.*))?)/;\nvar parts = [\"source\", \"protocol\", \"authority\", \"userInfo\", \"user\", \"password\", \"host\", \"port\", \"relative\", \"path\", \"directory\", \"file\", \"query\", \"anchor\"];\nfunction parse(str) {\n  if (str.length > 8e3) {\n    throw \"URI too long\";\n  }\n  const src = str,\n    b = str.indexOf(\"[\"),\n    e = str.indexOf(\"]\");\n  if (b != -1 && e != -1) {\n    str = str.substring(0, b) + str.substring(b, e).replace(/:/g, \";\") + str.substring(e, str.length);\n  }\n  let m = re.exec(str || \"\"),\n    uri = {},\n    i = 14;\n  while (i--) {\n    uri[parts[i]] = m[i] || \"\";\n  }\n  if (b != -1 && e != -1) {\n    uri.source = src;\n    uri.host = uri.host.substring(1, uri.host.length - 1).replace(/;/g, \":\");\n    uri.authority = uri.authority.replace(\"[\", \"\").replace(\"]\", \"\").replace(/;/g, \":\");\n    uri.ipv6uri = true;\n  }\n  uri.pathNames = pathNames(uri, uri[\"path\"]);\n  uri.queryKey = queryKey(uri, uri[\"query\"]);\n  return uri;\n}\nfunction pathNames(obj, path) {\n  const regx = /\\/{2,9}/g,\n    names = path.replace(regx, \"/\").split(\"/\");\n  if (path.slice(0, 1) == \"/\" || path.length === 0) {\n    names.splice(0, 1);\n  }\n  if (path.slice(-1) == \"/\") {\n    names.splice(names.length - 1, 1);\n  }\n  return names;\n}\nfunction queryKey(uri, query) {\n  const data = {};\n  query.replace(/(?:^|&)([^&=]*)=?([^&]*)/g, function ($0, $1, $2) {\n    if ($1) {\n      data[$1] = $2;\n    }\n  });\n  return data;\n}\n\n// node_modules/engine.io-client/build/esm/socket.js\nvar import_component_emitter3 = require(\"@socket.io/component-emitter@3.1.2\");\nvar import_engine5 = require(\"engine.io-parser@5.2.3\");\nvar withEventListeners = typeof addEventListener === \"function\" && typeof removeEventListener === \"function\";\nvar OFFLINE_EVENT_LISTENERS = [];\nif (withEventListeners) {\n  addEventListener(\"offline\", () => {\n    OFFLINE_EVENT_LISTENERS.forEach(listener => listener());\n  }, false);\n}\nvar SocketWithoutUpgrade = class extends import_component_emitter3.Emitter {\n  constructor(uri, opts) {\n    super();\n    this.binaryType = defaultBinaryType;\n    this.writeBuffer = [];\n    this._prevBufferLen = 0;\n    this._pingInterval = -1;\n    this._pingTimeout = -1;\n    this._maxPayload = -1;\n    this._pingTimeoutTime = Infinity;\n    if (uri && \"object\" === typeof uri) {\n      opts = uri;\n      uri = null;\n    }\n    if (uri) {\n      const parsedUri = parse(uri);\n      opts.hostname = parsedUri.host;\n      opts.secure = parsedUri.protocol === \"https\" || parsedUri.protocol === \"wss\";\n      opts.port = parsedUri.port;\n      if (parsedUri.query) opts.query = parsedUri.query;\n    } else if (opts.host) {\n      opts.hostname = parse(opts.host).host;\n    }\n    installTimerFunctions(this, opts);\n    this.secure = null != opts.secure ? opts.secure : typeof location !== \"undefined\" && \"https:\" === location.protocol;\n    if (opts.hostname && !opts.port) {\n      opts.port = this.secure ? \"443\" : \"80\";\n    }\n    this.hostname = opts.hostname || (typeof location !== \"undefined\" ? location.hostname : \"localhost\");\n    this.port = opts.port || (typeof location !== \"undefined\" && location.port ? location.port : this.secure ? \"443\" : \"80\");\n    this.transports = [];\n    this._transportsByName = {};\n    opts.transports.forEach(t => {\n      const transportName = t.prototype.name;\n      this.transports.push(transportName);\n      this._transportsByName[transportName] = t;\n    });\n    this.opts = Object.assign({\n      path: \"/engine.io\",\n      agent: false,\n      withCredentials: false,\n      upgrade: true,\n      timestampParam: \"t\",\n      rememberUpgrade: false,\n      addTrailingSlash: true,\n      rejectUnauthorized: true,\n      perMessageDeflate: {\n        threshold: 1024\n      },\n      transportOptions: {},\n      closeOnBeforeunload: false\n    }, opts);\n    this.opts.path = this.opts.path.replace(/\\/$/, \"\") + (this.opts.addTrailingSlash ? \"/\" : \"\");\n    if (typeof this.opts.query === \"string\") {\n      this.opts.query = decode(this.opts.query);\n    }\n    if (withEventListeners) {\n      if (this.opts.closeOnBeforeunload) {\n        this._beforeunloadEventListener = () => {\n          if (this.transport) {\n            this.transport.removeAllListeners();\n            this.transport.close();\n          }\n        };\n        addEventListener(\"beforeunload\", this._beforeunloadEventListener, false);\n      }\n      if (this.hostname !== \"localhost\") {\n        this._offlineEventListener = () => {\n          this._onClose(\"transport close\", {\n            description: \"network connection lost\"\n          });\n        };\n        OFFLINE_EVENT_LISTENERS.push(this._offlineEventListener);\n      }\n    }\n    if (this.opts.withCredentials) {\n      this._cookieJar = createCookieJar();\n    }\n    this._open();\n  }\n  createTransport(name) {\n    const query = Object.assign({}, this.opts.query);\n    query.EIO = import_engine5.protocol;\n    query.transport = name;\n    if (this.id) query.sid = this.id;\n    const opts = Object.assign({}, this.opts, {\n      query,\n      socket: this,\n      hostname: this.hostname,\n      secure: this.secure,\n      port: this.port\n    }, this.opts.transportOptions[name]);\n    return new this._transportsByName[name](opts);\n  }\n  _open() {\n    if (this.transports.length === 0) {\n      this.setTimeoutFn(() => {\n        this.emitReserved(\"error\", \"No transports available\");\n      }, 0);\n      return;\n    }\n    const transportName = this.opts.rememberUpgrade && SocketWithoutUpgrade.priorWebsocketSuccess && this.transports.indexOf(\"websocket\") !== -1 ? \"websocket\" : this.transports[0];\n    this.readyState = \"opening\";\n    const transport = this.createTransport(transportName);\n    transport.open();\n    this.setTransport(transport);\n  }\n  setTransport(transport) {\n    if (this.transport) {\n      this.transport.removeAllListeners();\n    }\n    this.transport = transport;\n    transport.on(\"drain\", this._onDrain.bind(this)).on(\"packet\", this._onPacket.bind(this)).on(\"error\", this._onError.bind(this)).on(\"close\", reason => this._onClose(\"transport close\", reason));\n  }\n  onOpen() {\n    this.readyState = \"open\";\n    SocketWithoutUpgrade.priorWebsocketSuccess = \"websocket\" === this.transport.name;\n    this.emitReserved(\"open\");\n    this.flush();\n  }\n  _onPacket(packet) {\n    if (\"opening\" === this.readyState || \"open\" === this.readyState || \"closing\" === this.readyState) {\n      this.emitReserved(\"packet\", packet);\n      this.emitReserved(\"heartbeat\");\n      switch (packet.type) {\n        case \"open\":\n          this.onHandshake(JSON.parse(packet.data));\n          break;\n        case \"ping\":\n          this._sendPacket(\"pong\");\n          this.emitReserved(\"ping\");\n          this.emitReserved(\"pong\");\n          this._resetPingTimeout();\n          break;\n        case \"error\":\n          const err = new Error(\"server error\");\n          err.code = packet.data;\n          this._onError(err);\n          break;\n        case \"message\":\n          this.emitReserved(\"data\", packet.data);\n          this.emitReserved(\"message\", packet.data);\n          break;\n      }\n    } else {}\n  }\n  onHandshake(data) {\n    this.emitReserved(\"handshake\", data);\n    this.id = data.sid;\n    this.transport.query.sid = data.sid;\n    this._pingInterval = data.pingInterval;\n    this._pingTimeout = data.pingTimeout;\n    this._maxPayload = data.maxPayload;\n    this.onOpen();\n    if (\"closed\" === this.readyState) return;\n    this._resetPingTimeout();\n  }\n  _resetPingTimeout() {\n    this.clearTimeoutFn(this._pingTimeoutTimer);\n    const delay = this._pingInterval + this._pingTimeout;\n    this._pingTimeoutTime = Date.now() + delay;\n    this._pingTimeoutTimer = this.setTimeoutFn(() => {\n      this._onClose(\"ping timeout\");\n    }, delay);\n    if (this.opts.autoUnref) {\n      this._pingTimeoutTimer.unref();\n    }\n  }\n  _onDrain() {\n    this.writeBuffer.splice(0, this._prevBufferLen);\n    this._prevBufferLen = 0;\n    if (0 === this.writeBuffer.length) {\n      this.emitReserved(\"drain\");\n    } else {\n      this.flush();\n    }\n  }\n  flush() {\n    if (\"closed\" !== this.readyState && this.transport.writable && !this.upgrading && this.writeBuffer.length) {\n      const packets = this._getWritablePackets();\n      this.transport.send(packets);\n      this._prevBufferLen = packets.length;\n      this.emitReserved(\"flush\");\n    }\n  }\n  _getWritablePackets() {\n    const shouldCheckPayloadSize = this._maxPayload && this.transport.name === \"polling\" && this.writeBuffer.length > 1;\n    if (!shouldCheckPayloadSize) {\n      return this.writeBuffer;\n    }\n    let payloadSize = 1;\n    for (let i = 0; i < this.writeBuffer.length; i++) {\n      const data = this.writeBuffer[i].data;\n      if (data) {\n        payloadSize += byteLength(data);\n      }\n      if (i > 0 && payloadSize > this._maxPayload) {\n        return this.writeBuffer.slice(0, i);\n      }\n      payloadSize += 2;\n    }\n    return this.writeBuffer;\n  }\n  _hasPingExpired() {\n    if (!this._pingTimeoutTime) return true;\n    const hasExpired = Date.now() > this._pingTimeoutTime;\n    if (hasExpired) {\n      this._pingTimeoutTime = 0;\n      nextTick(() => {\n        this._onClose(\"ping timeout\");\n      }, this.setTimeoutFn);\n    }\n    return hasExpired;\n  }\n  write(msg, options, fn) {\n    this._sendPacket(\"message\", msg, options, fn);\n    return this;\n  }\n  send(msg, options, fn) {\n    this._sendPacket(\"message\", msg, options, fn);\n    return this;\n  }\n  _sendPacket(type, data, options, fn) {\n    if (\"function\" === typeof data) {\n      fn = data;\n      data = void 0;\n    }\n    if (\"function\" === typeof options) {\n      fn = options;\n      options = null;\n    }\n    if (\"closing\" === this.readyState || \"closed\" === this.readyState) {\n      return;\n    }\n    options = options || {};\n    options.compress = false !== options.compress;\n    const packet = {\n      type,\n      data,\n      options\n    };\n    this.emitReserved(\"packetCreate\", packet);\n    this.writeBuffer.push(packet);\n    if (fn) this.once(\"flush\", fn);\n    this.flush();\n  }\n  close() {\n    const close = () => {\n      this._onClose(\"forced close\");\n      this.transport.close();\n    };\n    const cleanupAndClose = () => {\n      this.off(\"upgrade\", cleanupAndClose);\n      this.off(\"upgradeError\", cleanupAndClose);\n      close();\n    };\n    const waitForUpgrade = () => {\n      this.once(\"upgrade\", cleanupAndClose);\n      this.once(\"upgradeError\", cleanupAndClose);\n    };\n    if (\"opening\" === this.readyState || \"open\" === this.readyState) {\n      this.readyState = \"closing\";\n      if (this.writeBuffer.length) {\n        this.once(\"drain\", () => {\n          if (this.upgrading) {\n            waitForUpgrade();\n          } else {\n            close();\n          }\n        });\n      } else if (this.upgrading) {\n        waitForUpgrade();\n      } else {\n        close();\n      }\n    }\n    return this;\n  }\n  _onError(err) {\n    SocketWithoutUpgrade.priorWebsocketSuccess = false;\n    if (this.opts.tryAllTransports && this.transports.length > 1 && this.readyState === \"opening\") {\n      this.transports.shift();\n      return this._open();\n    }\n    this.emitReserved(\"error\", err);\n    this._onClose(\"transport error\", err);\n  }\n  _onClose(reason, description) {\n    if (\"opening\" === this.readyState || \"open\" === this.readyState || \"closing\" === this.readyState) {\n      this.clearTimeoutFn(this._pingTimeoutTimer);\n      this.transport.removeAllListeners(\"close\");\n      this.transport.close();\n      this.transport.removeAllListeners();\n      if (withEventListeners) {\n        if (this._beforeunloadEventListener) {\n          removeEventListener(\"beforeunload\", this._beforeunloadEventListener, false);\n        }\n        if (this._offlineEventListener) {\n          const i = OFFLINE_EVENT_LISTENERS.indexOf(this._offlineEventListener);\n          if (i !== -1) {\n            OFFLINE_EVENT_LISTENERS.splice(i, 1);\n          }\n        }\n      }\n      this.readyState = \"closed\";\n      this.id = null;\n      this.emitReserved(\"close\", reason, description);\n      this.writeBuffer = [];\n      this._prevBufferLen = 0;\n    }\n  }\n};\nSocketWithoutUpgrade.protocol = import_engine5.protocol;\nvar SocketWithUpgrade = class extends SocketWithoutUpgrade {\n  constructor() {\n    super(...arguments);\n    this._upgrades = [];\n  }\n  onOpen() {\n    super.onOpen();\n    if (\"open\" === this.readyState && this.opts.upgrade) {\n      for (let i = 0; i < this._upgrades.length; i++) {\n        this._probe(this._upgrades[i]);\n      }\n    }\n  }\n  _probe(name) {\n    let transport = this.createTransport(name);\n    let failed = false;\n    SocketWithoutUpgrade.priorWebsocketSuccess = false;\n    const onTransportOpen = () => {\n      if (failed) return;\n      transport.send([{\n        type: \"ping\",\n        data: \"probe\"\n      }]);\n      transport.once(\"packet\", msg => {\n        if (failed) return;\n        if (\"pong\" === msg.type && \"probe\" === msg.data) {\n          this.upgrading = true;\n          this.emitReserved(\"upgrading\", transport);\n          if (!transport) return;\n          SocketWithoutUpgrade.priorWebsocketSuccess = \"websocket\" === transport.name;\n          this.transport.pause(() => {\n            if (failed) return;\n            if (\"closed\" === this.readyState) return;\n            cleanup();\n            this.setTransport(transport);\n            transport.send([{\n              type: \"upgrade\"\n            }]);\n            this.emitReserved(\"upgrade\", transport);\n            transport = null;\n            this.upgrading = false;\n            this.flush();\n          });\n        } else {\n          const err = new Error(\"probe error\");\n          err.transport = transport.name;\n          this.emitReserved(\"upgradeError\", err);\n        }\n      });\n    };\n    function freezeTransport() {\n      if (failed) return;\n      failed = true;\n      cleanup();\n      transport.close();\n      transport = null;\n    }\n    const onerror = err => {\n      const error = new Error(\"probe error: \" + err);\n      error.transport = transport.name;\n      freezeTransport();\n      this.emitReserved(\"upgradeError\", error);\n    };\n    function onTransportClose() {\n      onerror(\"transport closed\");\n    }\n    function onclose() {\n      onerror(\"socket closed\");\n    }\n    function onupgrade(to) {\n      if (transport && to.name !== transport.name) {\n        freezeTransport();\n      }\n    }\n    const cleanup = () => {\n      transport.removeListener(\"open\", onTransportOpen);\n      transport.removeListener(\"error\", onerror);\n      transport.removeListener(\"close\", onTransportClose);\n      this.off(\"close\", onclose);\n      this.off(\"upgrading\", onupgrade);\n    };\n    transport.once(\"open\", onTransportOpen);\n    transport.once(\"error\", onerror);\n    transport.once(\"close\", onTransportClose);\n    this.once(\"close\", onclose);\n    this.once(\"upgrading\", onupgrade);\n    if (this._upgrades.indexOf(\"webtransport\") !== -1 && name !== \"webtransport\") {\n      this.setTimeoutFn(() => {\n        if (!failed) {\n          transport.open();\n        }\n      }, 200);\n    } else {\n      transport.open();\n    }\n  }\n  onHandshake(data) {\n    this._upgrades = this._filterUpgrades(data.upgrades);\n    super.onHandshake(data);\n  }\n  _filterUpgrades(upgrades) {\n    const filteredUpgrades = [];\n    for (let i = 0; i < upgrades.length; i++) {\n      if (~this.transports.indexOf(upgrades[i])) filteredUpgrades.push(upgrades[i]);\n    }\n    return filteredUpgrades;\n  }\n};\nvar Socket = class extends SocketWithUpgrade {\n  constructor(uri, opts = {}) {\n    const o = typeof uri === \"object\" ? uri : opts;\n    if (!o.transports || o.transports && typeof o.transports[0] === \"string\") {\n      o.transports = (o.transports || [\"polling\", \"websocket\", \"webtransport\"]).map(transportName => transports[transportName]).filter(t => !!t);\n    }\n    super(uri, o);\n  }\n};\n\n// node_modules/engine.io-client/build/esm/transports/polling-fetch.js\nvar Fetch = class extends Polling {\n  doPoll() {\n    this._fetch().then(res => {\n      if (!res.ok) {\n        return this.onError(\"fetch read error\", res.status, res);\n      }\n      res.text().then(data => this.onData(data));\n    }).catch(err => {\n      this.onError(\"fetch read error\", err);\n    });\n  }\n  doWrite(data, callback) {\n    this._fetch(data).then(res => {\n      if (!res.ok) {\n        return this.onError(\"fetch write error\", res.status, res);\n      }\n      callback();\n    }).catch(err => {\n      this.onError(\"fetch write error\", err);\n    });\n  }\n  _fetch(data) {\n    var _a;\n    const isPost = data !== void 0;\n    const headers = new Headers(this.opts.extraHeaders);\n    if (isPost) {\n      headers.set(\"content-type\", \"text/plain;charset=UTF-8\");\n    }\n    (_a = this.socket._cookieJar) === null || _a === void 0 ? void 0 : _a.appendCookies(headers);\n    return fetch(this.uri(), {\n      method: isPost ? \"POST\" : \"GET\",\n      body: isPost ? data : null,\n      headers,\n      credentials: this.opts.withCredentials ? \"include\" : \"omit\"\n    }).then(res => {\n      var _a2;\n      (_a2 = this.socket._cookieJar) === null || _a2 === void 0 ? void 0 : _a2.parseCookies(res.headers.getSetCookie());\n      return res;\n    });\n  }\n};\n\n// node_modules/engine.io-client/build/esm/index.js\nvar protocol2 = Socket.protocol;\n};\n\ncode(module, require);\n_exports(module.exports);\n}}});\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","dependencies":[{"id":"engine.io-parser@5.2.3","path":"D:\\Test\\client\\node_modules\\engine.io-parser"},{"id":"@socket.io/component-emitter@3.1.2","path":"D:\\Test\\client\\node_modules\\@socket.io\\component-emitter"}],"warnings":[]}